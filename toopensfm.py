import argparse
import glob
import json
import os

import cv2
import numpy as np


parser = argparse.ArgumentParser(
    description='Convert LSD-Slam results to OpenSfM'
)
parser.add_argument(
    '--calibration',
    help='calibration file (opencv style)'
)
parser.add_argument(
    '--poses',
    help='track file generated by LSD-Slam'
)
parser.add_argument(
    '--images',
    help='folder containing the images'
)
args = parser.parse_args()


r = {
    'cameras': {},
    'shots': {}
}

calibration_words = open(args.calibration).read().split()

fx, fy, cx, cy, k1, k2, p1, p2 = map(float, calibration_words[:8])
width, height = map(int, calibration_words[8:10])
size = max(width, height)

r['cameras']['slamcam'] = {
    'width': width,
    'height': height,
    'focal': np.sqrt(fx * fy) / size,
    'k1': k1,
    'k2': k2
}


def is_image(filename):
    return filename[-3:].lower() in ['jpg', 'png']

files = map(os.path.basename, glob.glob(args.images + '/*'))
images = filter(is_image, files)

keyframe_words = open(args.poses).read().split()

nframes = int(keyframe_words[0])

for i in range(1, len(keyframe_words), 14):
    words = keyframe_words[i:i + 14]

    keyframe_id = int(words[0])
    frame_id = int(words[1])
    print frame_id
    P = np.array([float(w) for w in words[2:14]]).reshape(3, 4)
    R = P[:, :3]
    t = P[:, 3] * 10
    r['shots'][images[frame_id]] = {
        'camera': 'slamcam',
        'rotation': list(cv2.Rodrigues(R)[0].flat),
        'translation': list(t.flat)
    }

with open('reconstruction.json', 'w') as fout:
    json.dump([r], fout, indent=4)
